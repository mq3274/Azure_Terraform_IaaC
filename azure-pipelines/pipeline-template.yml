parameters:
  - name: environment

stages:
  - stage: initandplan
    displayName: init and plan
    jobs:
      - job: security_check
        displayName: security_check
        steps:
        - task: tfsec@1
          inputs:
            version: 'v1.26.0'
            dir: '$(work-dir)'
          displayName: tf-sec-scan

        - task: CmdLine@2
          inputs:
            script: 'checkov -d . -o junitxml --output-path-file $(System.DefaultWorkingDirectory)/checkov_report.xml'
            workingDirectory: '$(System.DefaultWorkingDirectory)/Azure_terraform/Basic-RG'
          displayName: 'checkov' 

        - task: PublishTestResults@2
          condition: always()
          inputs:
            testResultsFormat: 'JUnit'
            testResultsFiles: 'checkov_report.xml'
            searchFolder: '$(System.DefaultWorkingDirectory)/Azure_terraform/Basic-RG'
          displayName: 'Publish Checkov JUnit Results to Azure DevOps'  

        - task: CmdLine@2
          condition: always()
          inputs:
            script: 'tflint --chdir=. --format=junit > tflint_report.xml'
            workingDirectory: '$(System.DefaultWorkingDirectory)/Azure_terraform/Basic-RG'      
          displayName: 'Run TFLint'    

        - task: PublishTestResults@2
          condition: always()
          inputs:
            testResultsFormat: 'JUnit'
            testResultsFiles: 'tflint_report.xml'
            searchFolder: '$(System.DefaultWorkingDirectory)/Azure_terraform/Basic-RG'
          displayName: 'Publish tflint JUnit Results to Azure DevOps'      

      - job: initandplan
        displayName: init and plan
        dependsOn: security_check
        steps:
        - task: TerraformTaskV4@4
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: '$(work-dir)'
            backendServiceArm: 'my service-wif'
            backendAzureRmResourceGroupName: 'test'
            backendAzureRmStorageAccountName: 'test'
            backendAzureRmContainerName: 'test'
            backendAzureRmKey: '${{parameters.environment}}.terraform.tfstate'
          displayName: terraform init
        
        - task: TerraformTaskV4@4
          inputs:
            provider: 'azurerm'
            command: 'validate'
            workingDirectory: '$(work-dir)'
          displayName: terraform validate

        - task: TerraformTaskV4@4
          inputs:
            provider: 'azurerm'
            command: 'plan'
            workingDirectory: '$(work-dir)'
            environmentServiceNameAzureRM: 'my service-wif'
            commandOptions:  --var-file=${{parameters.environment}}.terraform.tfvars
          displayName: terraform plan

  - stage: validateandapply
    displayName: validate and apply
    condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'main'))    
    jobs:          
      - job: Manual_validation
        displayName: Manual_validation
        continueOnError: true
        pool: server
        steps:
          - task: Delay@1
            inputs:
               delayForMinutes: '0'

          - task: ManualValidation@1
            inputs:
              notifyUsers: 'abc@xyz.com'
              allowApproversToApproveTheirOwnRuns: true
              instructions: 'please validate my code' 
    
      - job: terraform_apply
        dependsOn: Manual_validation
        displayName: terraform_apply
        continueOnError: true
        steps:
        - task: TerraformTaskV4@4
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: '$(work-dir)'
            backendServiceArm: 'my service-wif'
            backendAzureRmResourceGroupName: 'test'
            backendAzureRmStorageAccountName: 'test'
            backendAzureRmContainerName: 'test'
            backendAzureRmKey: '${{parameters.environment}}.terraform.tfstate'
          displayName: terraform init
       
        - task: TerraformTaskV4@4
          inputs:
            provider: 'azurerm'
            command: 'apply'
            workingDirectory: '$(work-dir)'
            environmentServiceNameAzureRM: 'my service-wif'
            commandOptions:  --var-file=${{parameters.environment}}.terraform.tfvars
          displayName: terraform apply   

        - task: TerraformTaskV4@4
          inputs:
            provider: 'azurerm'
            command: 'destroy'
            workingDirectory: '$(work-dir)'
            environmentServiceNameAzureRM: 'my service-wif'
            commandOptions:  --var-file=${{parameters.environment}}.terraform.tfvars
          displayName: Terraform destroy              
